{"version":3,"file":"static/js/832.1373b9bd.chunk.js","mappings":"gQAkHA,MAvGA,WACE,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAGTC,IAFSC,EAAAA,EAAAA,MAEUC,EAAAA,WAAiBC,EAAAA,IAApCH,gBACFI,GAAYC,EAAAA,EAAAA,KAAY,SAACC,GAAU,OAAKA,EAAMC,QAAQ,IAC5D,GAAyBC,EAAAA,EAAAA,UAAS,CAChC,CAAE,KAAQ,SAAU,MAAS,IAC7B,CAAE,KAAQ,OAAQ,MAAS,YAC3B,CAAE,KAAQ,WAAY,MAAS,YAH1BC,GAIL,YAJc,GAKVC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,YAAa,GACbC,SAAU,YAEZC,gBAAgB,EAChBC,kBAAkB,EAElBC,SAAU,SAACC,GACT,IAAIC,EAAc,CAAC,EAUnB,OATKD,EAAOL,aAA6C,KAA9BK,EAAOL,YAAYO,SAC5CD,EAAON,YAAc,sCAKlBK,EAAOJ,WACVK,EAAOL,SAAW,8BAEbK,CACT,EACAE,SAAU,SAACH,GAETpB,EAASwB,EAAAA,GAA4B,CAAEC,SAAUL,IACnD,IA4BF,OAzBAM,EAAAA,EAAAA,YAAU,WAIR,OAAQpB,EAAUqB,MAChB,KAAKC,EAAAA,GACH1B,GAAe,GACfJ,EAAS,eAAgB,CACvBU,MAAO,CACLqB,IAAKvB,EAAUwB,YAAYD,IAAMvB,EAAUwB,YAAYD,IAAIE,WAAa,KACxEhB,YAAaH,EAAOQ,OAAOL,YAC3BC,SAAUJ,EAAOQ,OAAOJ,YAG5B,MACF,KAAKY,EAAAA,GACH1B,GAAe,IACf8B,EAAAA,EAAAA,IAAM1B,EAAU2B,QAAS,CAAEC,SAAU,eAK3C,GAAG,CAAC5B,EAAUqB,QAIZ,iBAAKQ,UAAU,YAAW,WACxB,kDACA,+EACmD,eAAIA,UAAU,eAAe,4BAEhF,iBAAMZ,SAAUX,EAAOwB,aAAcC,YAAU,YAC7C,iBAAKF,UAAU,aAAY,WACzB,iBAAKA,UAAU,aAAY,WACzB,kBACEG,KAAK,OACLC,YAAY,gBACZC,KAAK,cACLC,UAAW,GACXC,SAAU9B,EAAO+B,aACjBC,MAAOhC,EAAOQ,OAAOL,cAEtBH,EAAOS,OAAON,cAAe,cAAGoB,UAAU,aAAY,SAAEvB,EAAOS,OAAON,kBAEzE,0BACE,mBAAQyB,KAAK,WAAWI,MAAOhC,EAAOQ,OAAOJ,SAAU6B,GAAG,WAAWH,SAAU9B,EAAO+B,aAAa,SAChGhC,EAAUmC,KAAI,SAAC9B,EAAe+B,GAC7B,OAAQ,mBAA4BH,MAAO5B,EAAS4B,MAAM,SAAE5B,EAASwB,MAAI,WAAhDO,GAC3B,MAEDnC,EAAOoC,QAAQhC,UAAYJ,EAAOS,OAAOL,WAAY,cAAGmB,UAAU,aAAY,SAAEvB,EAAOS,OAAOL,eAEjG,mBAAQsB,KAAK,SAASH,UAAU,aAAY,qBAG5C,mBAAQG,KAAK,SAASH,UAAU,gBAAgBc,QAAS,kBAAMnD,EAAS,SAAU,CAAEoD,SAAS,GAAO,EAAC,kCAO/G,C","sources":["pages/Auth/ForgotPassword/forgotPassword.tsx"],"sourcesContent":["import { useFormik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { storage } from \"../../../utills\";\nimport \"./forgotPassword.scss\";\nimport * as AUTH_ACTIONS from \"../../../redux/actions/Auth/authActions\";\nimport * as AUTH_ACTIONS_TYPES from \"../../../redux/actions/Auth/types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppLoaderContext } from \"../../../contexts\";\nimport { toast } from \"react-toastify\";\n\nfunction LoginScreen() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const location = useLocation();\n  // const { isSideActive, toggleSidebar } = React.useContext(SideBarContext);\n  const { setIsAppLoader } = React.useContext(AppLoaderContext);\n  const userState = useSelector((state: any) => state.userData);\n  const [userTypes]: any = useState([\n    { \"name\": \"Select\", \"value\": \"\" },\n    { \"name\": \"User\", \"value\": \"consumer\" },\n    { \"name\": \"Hospital\", \"value\": \"clinic\" },\n  ]);\n  const formik = useFormik({\n    initialValues: {\n      phoneNumber: \"\",\n      userType: \"consumer\"\n    },\n    validateOnBlur: true,\n    validateOnChange: false,\n    // validationSchema: validationSchema,\n    validate: (values) => {\n      let errors: any = {};\n      if (!values.phoneNumber || values.phoneNumber.length !== 10) {\n        errors.phoneNumber = \"Please enter 10 digit phone number\";\n      }\n      // if (!values.password) {\n      //   errors.password = \"Please enter password\";\n      // }\n      if (!values.userType) {\n        errors.userType = \"Please select type of user\";\n      }\n      return errors;\n    },\n    onSubmit: (values) => {\n      // setIsAppLoader(true);\n      dispatch(AUTH_ACTIONS.forgotPassword({ formData: values }));\n    }\n  });\n\n  useEffect(() => {\n    // console.log(\"userState\", userState);\n    // console.log(\"Location\",location);\n\n    switch (userState.case) {\n      case AUTH_ACTIONS_TYPES.FORGOT_PASSWORD_SUCCESS:\n        setIsAppLoader(false);\n        navigate(\"/newPassword\", {\n          state: {\n            otp: userState.userDetails.otp ? userState.userDetails.otp.toString() : null,\n            phoneNumber: formik.values.phoneNumber,\n            userType: formik.values.userType\n          }\n        });\n        break;\n      case AUTH_ACTIONS_TYPES.FORGOT_PASSWORD_FAILURE:\n        setIsAppLoader(false);\n        toast(userState.message, { position: \"top-center\" });\n        break;\n      default:\n        break;\n    }\n  }, [userState.case]);\n\n\n  return (\n    <div className=\"form-area\">\n      <h2>Forgot your password</h2>\n      <h4>\n        Enter your registered mobile number we will send <br className=\"mb-nobreak\" /> you OTP after submit\n      </h4>\n      <form onSubmit={formik.handleSubmit} noValidate>\n        <div className=\"form-inner\">\n          <div className=\"form-input\">\n            <input\n              type=\"text\"\n              placeholder=\"Mobile number\"\n              name=\"phoneNumber\"\n              maxLength={10}\n              onChange={formik.handleChange}\n              value={formik.values.phoneNumber}\n            />\n            {formik.errors.phoneNumber && <p className=\"error-text\">{formik.errors.phoneNumber}</p>}\n          </div>\n          <p>\n            <select name=\"userType\" value={formik.values.userType} id=\"userType\" onChange={formik.handleChange}>\n              {userTypes.map((userType: any, userInd: number) => {\n                return (<option key={`_${userInd}`} value={userType.value}>{userType.name}</option>);\n              })}\n            </select>\n            {formik.touched.userType && formik.errors.userType && <p className='error-text'>{formik.errors.userType}</p>}\n          </p>\n          <button type=\"submit\" className=\"btn-common\">\n            Submit\n          </button>\n          <button type=\"button\" className=\"btn-underline\" onClick={() => navigate(\"/login\", { replace: true })}>\n            Back to login\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default LoginScreen;\n"],"names":["navigate","useNavigate","dispatch","useDispatch","setIsAppLoader","useLocation","React","AppLoaderContext","userState","useSelector","state","userData","useState","userTypes","formik","useFormik","initialValues","phoneNumber","userType","validateOnBlur","validateOnChange","validate","values","errors","length","onSubmit","AUTH_ACTIONS","formData","useEffect","case","AUTH_ACTIONS_TYPES","otp","userDetails","toString","toast","message","position","className","handleSubmit","noValidate","type","placeholder","name","maxLength","onChange","handleChange","value","id","map","userInd","touched","onClick","replace"],"sourceRoot":""}