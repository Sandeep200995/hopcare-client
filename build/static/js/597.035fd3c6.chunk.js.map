{"version":3,"file":"static/js/597.035fd3c6.chunk.js","mappings":"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","sources":["pages/Auth/Login/loginScreen.tsx"],"sourcesContent":["import { useFormik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate, useParams, redirect } from \"react-router-dom\";\nimport { storage } from \"../../../utills\";\nimport \"./login.scss\";\nimport * as AUTH_ACTIONS from \"../../../redux/actions/Auth/authActions\";\nimport * as AUTH_ACTIONS_TYPES from \"../../../redux/actions/Auth/types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppLoaderContext, AuthContext } from \"../../../contexts\";\nimport { toast } from \"react-toastify\";\n\nfunction LoginScreen() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const params: any = useParams();\n  const locationParams: any = useLocation();\n  const { setIsAuthenticated } = React.useContext(AuthContext);\n  const { setIsAppLoader } = React.useContext(AppLoaderContext);\n  const userState = useSelector((state: any) => state.userData);\n  const [userTypes]: any = useState([\n    { \"name\": \"Select\", \"value\": \"\" },\n    { \"name\": \"User\", \"value\": \"consumer\" },\n    { \"name\": \"Hospital\", \"value\": \"clinic\" },\n  ]);\n  const formik = useFormik({\n    initialValues: {\n      phoneNumber: \"\",\n      password: \"\",\n      userType: \"consumer\"\n    },\n    validateOnBlur: true,\n    validateOnChange: false,\n    // validationSchema: validationSchema,\n    validate: (values) => {\n      let errors: any = {};\n      if (!values.phoneNumber) {\n        errors.phoneNumber = \"Please enter 10 digit phone number\";\n      }\n      if (!values.password) {\n        errors.password = \"Please enter password\";\n      }\n      if (!values.userType) {\n        errors.userType = \"Please select type of user\";\n      }\n      return errors;\n    },\n    onSubmit: (values) => {\n      setIsAppLoader(true);\n      dispatch(AUTH_ACTIONS.authenticateUser({ formData: values }));\n    }\n  });\n\n  useEffect(() => {\n    console.log(\"userState\", userState);\n    console.log(\"formik.values\", formik.values);\n\n    switch (userState.case) {\n      case AUTH_ACTIONS_TYPES.AUTHENTICATE_USER_SUCCESS:\n        setIsAppLoader(false);\n        if (locationParams && locationParams.state && locationParams.state.pathName) {\n          navigate(`${locationParams.state.pathName}`, { state: locationParams.state.stateData, replace: true })\n        } else {\n          storage.storeData(storage.keys.USER_TYPE, userState.userDetails.userType);\n          if (formik.values && userState.userDetails.userType === \"clinic\") {\n            storage.storeData(storage.keys.TOKEN_HS, userState.userDetails.accessToken);\n            navigate(\"/clinic_appointments\", { replace: true });\n            setIsAuthenticated(true);\n          } else {\n            storage.storeData(storage.keys.TOKEN_CL, userState.userDetails.accessToken);\n            navigate(\"/\", { replace: true });\n            setIsAuthenticated(true);\n          }\n        }\n        break;\n      case AUTH_ACTIONS_TYPES.AUTHENTICATE_USER_NOT_VERIFIED:\n        setIsAppLoader(false);\n        navigate(\"/otp\", {\n          replace: true,\n          state: {\n            otp: userState.userDetails.otp ? userState.userDetails.otp.toString() : null,\n            phoneNumber: formik.values.phoneNumber,\n            userType: formik.values.userType,\n            password: formik.values.password,\n          }\n        });\n        storage.storeData(storage.keys.USER_TYPE, userState.userDetails.userType);\n        break;\n      case AUTH_ACTIONS_TYPES.AUTHENTICATE_USER_FAILURE:\n        setIsAppLoader(false);\n        toast(userState.message, { position: \"top-center\" });\n        break;\n      default:\n        break;\n    }\n  }, [userState.case]);\n\n\n\n  return (\n    <div className=\"form-area\">\n      <h2>Login</h2>\n      <form onSubmit={formik.handleSubmit} noValidate>\n        <div className=\"form-inner\">\n          <div className=\"form-input\">\n            <input\n              type=\"text\"\n              placeholder=\"Mobile number\"\n              name=\"phoneNumber\"\n              maxLength={10}\n              onChange={formik.handleChange}\n              value={formik.values.phoneNumber}\n            />\n            {formik.touched.phoneNumber && formik.errors.phoneNumber && <p className=\"error-text\">{formik.errors.phoneNumber}</p>}\n          </div>\n          <div className=\"form-input\">\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={formik.handleChange}\n              value={formik.values.password}\n            />\n            {formik.touched.password && formik.errors.password && <p className=\"error-text\">{formik.errors.password}</p>}\n          </div>\n          <div className=\"select-option-dropdown\">\n            <select name=\"userType\" value={formik.values.userType} id=\"userType\" onChange={formik.handleChange}>\n              {userTypes.map((userType: any, userInd: number) => {\n                return (<option key={`_${userInd}`} value={userType.value}>{userType.name}</option>);\n              })}\n            </select>\n            {formik.touched.userType && formik.errors.userType && <p className='error-text'>{formik.errors.userType}</p>}\n          </div>\n          <button type=\"submit\" className=\"btn-common\">Submit</button>\n          <button type=\"button\" className=\"btn-underline\">\n            <span onClick={() => navigate(\"/register\", { replace: true })}>Register here!</span>{\" \"}\n          </button>\n          <div className=\"flex justify-space-between\">\n            <button type=\"button\" className=\"btn-underline\">Back</button>\n            <button type=\"button\" className=\"btn-underline\">\n              <span onClick={() => navigate(\"/forgotPassword\", { replace: true })}>Forgot Password?</span>{\" \"}\n            </button>\n          </div>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default LoginScreen;\n"],"names":["navigate","useNavigate","dispatch","useDispatch","locationParams","useParams","useLocation","setIsAuthenticated","React","AuthContext","setIsAppLoader","AppLoaderContext","userState","useSelector","state","userData","useState","userTypes","formik","useFormik","initialValues","phoneNumber","password","userType","validateOnBlur","validateOnChange","validate","values","errors","onSubmit","AUTH_ACTIONS","formData","useEffect","console","log","case","AUTH_ACTIONS_TYPES","pathName","stateData","replace","storage","userDetails","accessToken","otp","toString","toast","message","position","className","handleSubmit","noValidate","type","placeholder","name","maxLength","onChange","handleChange","value","touched","id","map","userInd","onClick"],"sourceRoot":""}