{"version":3,"file":"static/js/832.f523c2bc.chunk.js","mappings":"uPAiGA,MAtFA,WACE,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAGTC,IAFSC,EAAAA,EAAAA,MAEUC,EAAAA,WAAiBC,EAAAA,IAApCH,gBACFI,GAAYC,EAAAA,EAAAA,KAAY,SAACC,GAAU,OAAKA,EAAMC,QAAQ,IACtDC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,YAAa,GACbC,SAAU,YAEZC,gBAAgB,EAChBC,kBAAkB,EAElBC,SAAU,SAACC,GACT,IAAIC,EAAc,CAAC,EAOnB,OANKD,EAAOL,aAA8C,KAA/BK,EAAOL,YAAYO,SAC5CD,EAAON,YAAc,sCAKhBM,CACT,EACAE,SAAU,SAACH,GAETlB,EAASsB,EAAAA,GAA4B,CAAEC,SAAUL,IACnD,IA4BF,OAzBAM,EAAAA,EAAAA,YAAU,WAIR,OAHAC,QAAQC,IAAI,YAAapB,GAGjBA,EAAUqB,MAChB,KAAKC,EAAAA,GACH1B,GAAe,GACfJ,EAAS,eAAgB,CACvBU,MAAO,CACLqB,IAAKvB,EAAUwB,YAAYD,IAAMvB,EAAUwB,YAAYD,IAAIE,WAAa,KACxElB,YAAaH,EAAOQ,OAAOL,YAC3BC,SAAUJ,EAAOQ,OAAOJ,YAG5B,MACF,KAAKc,EAAAA,GACH1B,GAAe,IACf8B,EAAAA,EAAAA,IAAM1B,EAAU2B,QAAQ,CAACC,SAAS,eAKxC,GAAG,CAAC5B,EAAUqB,QAIZ,iBAAKQ,UAAU,YAAW,WACxB,kDACA,+EACmD,eAAIA,UAAU,eAAe,4BAEhF,iBAAMd,SAAUX,EAAO0B,aAAcC,YAAU,YAC7C,iBAAKF,UAAU,aAAY,WACzB,iBAAKA,UAAU,aAAY,WACzB,kBACEG,KAAK,OACLC,YAAY,gBACZC,KAAK,cACLC,SAAU/B,EAAOgC,aACjBC,MAAOjC,EAAOQ,OAAOL,cAEtBH,EAAOS,OAAON,cAAe,cAAGsB,UAAU,aAAY,SAAEzB,EAAOS,OAAON,kBAEzE,mBAAQyB,KAAK,SAASH,UAAU,aAAY,qBAG5C,mBAAQG,KAAK,SAASH,UAAU,gBAAgBS,QAAS,kBAAM9C,EAAS,SAAU,CAAE+C,SAAS,GAAO,EAAC,kCAO/G,C,sHCvFaC,EAAmB,SAACC,GAE/B,MAAO,CAAET,KAAMU,EAAAA,GAA8BD,QAAAA,EAC/C,EAGaE,EAAe,SAACF,GAE3B,MAAO,CAAET,KAAMU,EAAAA,GAA0BD,QAAAA,EAC3C,EAGaG,EAAiB,SAACH,GAE7B,MAAO,CAAET,KAAMU,EAAAA,GAA4BD,QAAAA,EAC7C,C","sources":["pages/Auth/ForgotPassword/forgotPassword.tsx","redux/actions/Auth/authActions.tsx"],"sourcesContent":["import { useFormik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { storage } from \"../../../utills\";\nimport \"./forgotPassword.scss\";\nimport * as AUTH_ACTIONS from \"../../../redux/actions/Auth/authActions\";\nimport * as AUTH_ACTIONS_TYPES from \"../../../redux/actions/Auth/types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppLoaderContext } from \"../../../contexts\";\nimport { toast } from \"react-toastify\";\n\nfunction LoginScreen() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const location = useLocation();\n  // const { isSideActive, toggleSidebar } = React.useContext(SideBarContext);\n  const { setIsAppLoader } = React.useContext(AppLoaderContext);\n  const userState = useSelector((state: any) => state.userData);\n  const formik = useFormik({\n    initialValues: {\n      phoneNumber: \"\",\n      userType: \"consumer\"\n    },\n    validateOnBlur: true,\n    validateOnChange: false,\n    // validationSchema: validationSchema,\n    validate: (values) => {\n      let errors: any = {};\n      if (!values.phoneNumber || values.phoneNumber.length  !== 10) {\n        errors.phoneNumber = \"Please enter 10 digit phone number\";\n      }\n      // if (!values.password) {\n      //   errors.password = \"Please enter password\";\n      // }\n      return errors;\n    },\n    onSubmit: (values) => {\n      // setIsAppLoader(true);\n      dispatch(AUTH_ACTIONS.forgotPassword({ formData: values }));\n    }\n  });\n\n  useEffect(() => {\n    console.log(\"userState\", userState);\n    // console.log(\"Location\",location);\n\n    switch (userState.case) {\n      case AUTH_ACTIONS_TYPES.FORGOT_PASSWORD_SUCCESS:\n        setIsAppLoader(false);\n        navigate(\"/newPassword\", {\n          state: {\n            otp: userState.userDetails.otp ? userState.userDetails.otp.toString() : null,\n            phoneNumber: formik.values.phoneNumber,\n            userType: formik.values.userType\n          }\n        });\n        break;\n      case AUTH_ACTIONS_TYPES.FORGOT_PASSWORD_FAILURE:\n        setIsAppLoader(false);\n        toast(userState.message,{position:\"top-center\"});\n        break;\n      default:\n        break;\n    }\n  }, [userState.case]);\n\n\n  return (\n    <div className=\"form-area\">\n      <h2>Forgot your password</h2>\n      <h4>\n        Enter your registered mobile number we will send <br className=\"mb-nobreak\" /> you OTP after submit\n      </h4>\n      <form onSubmit={formik.handleSubmit} noValidate>\n        <div className=\"form-inner\">\n          <div className=\"form-input\">\n            <input\n              type=\"text\"\n              placeholder=\"Mobile number\"\n              name=\"phoneNumber\"\n              onChange={formik.handleChange}\n              value={formik.values.phoneNumber}\n            />\n            {formik.errors.phoneNumber && <p className=\"error-text\">{formik.errors.phoneNumber}</p>}\n          </div>\n          <button type=\"submit\" className=\"btn-common\">\n            Submit\n          </button>\n          <button type=\"button\" className=\"btn-underline\" onClick={() => navigate(\"/login\", { replace: true })}>\n            Back to login\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default LoginScreen;\n","import * as AUTH_TYPES from \"./types\";\n\n/**\n * @summary Authetication Actions\n */\n//Actions\n\n//1. Authenticate User Action\nexport const authenticateUser = (payload: object) => {\n  // console.log(\"PAYLOAD @ AuthenticateUserAction\",payload);\n  return { type: AUTH_TYPES.AUTHENTICATE_USER, payload };\n};\n\n//2. Register User Action\nexport const registerUser = (payload: object) => {\n  // console.log(\"PAYLOAD @ AuthenticateUserAction\",payload);\n  return { type: AUTH_TYPES.REGISTER_USER, payload };\n};\n\n//3. Forgot Password Action\nexport const forgotPassword = (payload: object) => {\n  // console.log(\"PAYLOAD @ AuthenticateUserAction\",payload);\n  return { type: AUTH_TYPES.FORGOT_PASSWORD, payload };\n};\n\n//4. Change Password Action\nexport const changePassword = (payload: object) => {\n  // console.log(\"PAYLOAD @ AuthenticateUserAction\",payload);\n  return { type: AUTH_TYPES.CHANGE_PASSWORD, payload };\n};\n"],"names":["navigate","useNavigate","dispatch","useDispatch","setIsAppLoader","useLocation","React","AppLoaderContext","userState","useSelector","state","userData","formik","useFormik","initialValues","phoneNumber","userType","validateOnBlur","validateOnChange","validate","values","errors","length","onSubmit","AUTH_ACTIONS","formData","useEffect","console","log","case","AUTH_ACTIONS_TYPES","otp","userDetails","toString","toast","message","position","className","handleSubmit","noValidate","type","placeholder","name","onChange","handleChange","value","onClick","replace","authenticateUser","payload","AUTH_TYPES","registerUser","forgotPassword"],"sourceRoot":""}