{"version":3,"file":"static/js/597.3f3bd0d3.chunk.js","mappings":"iQAqIA,MA1HA,WACE,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACTC,EAAuBC,EAAAA,WAAiBC,EAAAA,IAAxCF,mBACAG,EAAmBF,EAAAA,WAAiBG,EAAAA,IAApCD,eACFE,GAAYC,EAAAA,EAAAA,KAAY,SAACC,GAAU,OAAKA,EAAMC,QAAQ,IACtDC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,YAAa,GACbC,SAAU,GACVC,SAAU,YAEZC,gBAAgB,EAChBC,kBAAkB,EAElBC,SAAU,SAACC,GACT,IAAIC,EAAc,CAAC,EAOnB,OANKD,EAAON,cACVO,EAAOP,YAAc,sCAElBM,EAAOL,WACVM,EAAON,SAAW,yBAEbM,CACT,EACAC,SAAU,SAACF,GACTf,GAAe,GACfL,EAASuB,EAAAA,GAA8B,CAAEC,SAAUJ,IACrD,IA2CF,OAxCAK,EAAAA,EAAAA,YAAU,WAEV,GAAG,KAGHA,EAAAA,EAAAA,YAAU,WAER,OAAQlB,EAAUmB,MAChB,KAAKC,EAAAA,GACHtB,GAAe,GACfP,EAAS,IAAK,CAAE8B,SAAS,IACzBC,EAAAA,EAAAA,UAAkBA,EAAAA,EAAAA,KAAAA,SAAuBtB,EAAUuB,YAAYC,aAC/DF,EAAAA,EAAAA,UAAkBA,EAAAA,EAAAA,KAAAA,UAAwBtB,EAAUuB,YAAYd,UAEhEd,GAAmB,GACnB,MACF,KAAKyB,EAAAA,GACHtB,GAAe,GACfP,EAAS,OAAQ,CACf8B,SAAS,EACTnB,MAAO,CACLuB,IAAKzB,EAAUuB,YAAYE,IAAMzB,EAAUuB,YAAYE,IAAIC,WAAa,KACxEnB,YAAaH,EAAOS,OAAON,YAC3BE,SAAUL,EAAOS,OAAOJ,SACxBD,SAAUJ,EAAOS,OAAOL,YAG5Bc,EAAAA,EAAAA,UAAkBA,EAAAA,EAAAA,KAAAA,UAAwBtB,EAAUuB,YAAYd,UAChE,MACF,KAAKW,EAAAA,GACHtB,GAAe,IACf6B,EAAAA,EAAAA,IAAM3B,EAAU4B,QAAQ,CAACC,SAAS,eAKxC,GAAG,CAAC7B,EAAUmB,QAKZ,iBAAKW,UAAU,YAAW,WACxB,mCACA,iBAAMf,SAAUX,EAAO2B,aAAcC,YAAU,YAC7C,iBAAKF,UAAU,aAAY,WACzB,gBAAKA,UAAU,aAAY,UACzB,kBACEG,KAAK,OACLC,YAAY,gBACZC,KAAK,cACLC,UAAW,GACXC,SAAUjC,EAAOkC,aACjBC,MAAOnC,EAAOS,OAAON,iBAKzB,gBAAKuB,UAAU,aAAY,UACzB,kBACEG,KAAK,WACLE,KAAK,WACLD,YAAY,WACZG,SAAUjC,EAAOkC,aACjBC,MAAOnC,EAAOS,OAAOL,cAIzB,mBAAQyB,KAAK,SAASH,UAAU,aAAY,qBAI5C,oBAAQG,KAAK,SAASH,UAAU,gBAAe,WAE7C,iBAAMU,QAAS,kBAAKjD,EAAS,YAAa,CAAE8B,SAAS,GAAO,EAAC,4BAAuB,QAEtF,iBAAKS,UAAU,6BAA4B,WAC3C,mBAAQG,KAAK,SAASH,UAAU,gBAAe,mBAG7C,oBAAQG,KAAK,SAASH,UAAU,gBAAe,WAC7C,iBAAMU,QAAS,kBAAMjD,EAAS,kBAAmB,CAAE8B,SAAS,GAAO,EAAC,8BAAyB,iBAS3G,C","sources":["pages/Auth/Login/loginScreen.tsx"],"sourcesContent":["import { useFormik } from \"formik\";\nimport React, { useEffect } from \"react\";\nimport { useLocation, useNavigate, useParams, redirect } from \"react-router-dom\";\nimport { storage } from \"../../../utills\";\nimport \"./login.scss\";\nimport * as AUTH_ACTIONS from \"../../../redux/actions/Auth/authActions\";\nimport * as AUTH_ACTIONS_TYPES from \"../../../redux/actions/Auth/types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppLoaderContext ,AuthContext} from \"../../../contexts\";\nimport { toast } from \"react-toastify\";\n\nfunction LoginScreen() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { setIsAuthenticated } = React.useContext(AuthContext);\n  const { setIsAppLoader } = React.useContext(AppLoaderContext);\n  const userState = useSelector((state: any) => state.userData);\n  const formik = useFormik({\n    initialValues: {\n      phoneNumber: \"\",\n      password: \"\",\n      userType: \"consumer\"\n    },\n    validateOnBlur: true,\n    validateOnChange: false,\n    // validationSchema: validationSchema,\n    validate: (values) => {\n      let errors: any = {};\n      if (!values.phoneNumber) {\n        errors.phoneNumber = \"Please enter 10 digit phone number\";\n      }\n      if (!values.password) {\n        errors.password = \"Please enter password\";\n      }\n      return errors;\n    },\n    onSubmit: (values) => {\n      setIsAppLoader(true);\n      dispatch(AUTH_ACTIONS.authenticateUser({ formData: values }));\n    }\n  });\n\n  useEffect(() => {\n\n  }, [])\n\n\n  useEffect(() => {\n    // console.log(\"userState\", userState);\n    switch (userState.case) {\n      case AUTH_ACTIONS_TYPES.AUTHENTICATE_USER_SUCCESS:\n        setIsAppLoader(false);\n        navigate(\"/\", { replace: true });\n        storage.storeData(storage.keys.TOKEN_CL, userState.userDetails.accessToken);\n        storage.storeData(storage.keys.USER_TYPE, userState.userDetails.userType);\n        // storage.storeData(storage.keys.USER_ID, userState.userDetails.userId);\n        setIsAuthenticated(true);\n        break;\n      case AUTH_ACTIONS_TYPES.AUTHENTICATE_USER_NOT_VERIFIED:\n        setIsAppLoader(false);\n        navigate(\"/otp\", {\n          replace: true,\n          state: {\n            otp: userState.userDetails.otp ? userState.userDetails.otp.toString() : null,\n            phoneNumber: formik.values.phoneNumber,\n            userType: formik.values.userType,\n            password: formik.values.password,\n          }\n        });\n        storage.storeData(storage.keys.USER_TYPE, userState.userDetails.userType);\n        break;\n      case AUTH_ACTIONS_TYPES.AUTHENTICATE_USER_FAILURE:\n        setIsAppLoader(false);\n        toast(userState.message,{position:\"top-center\"});\n        break;\n      default:\n        break;\n    }\n  }, [userState.case]);\n\n\n\n  return (\n    <div className=\"form-area\">\n      <h2>Login</h2>\n      <form onSubmit={formik.handleSubmit} noValidate>\n        <div className=\"form-inner\">\n          <div className=\"form-input\">\n            <input\n              type=\"text\"\n              placeholder=\"Mobile number\"\n              name=\"phoneNumber\"\n              maxLength={10}\n              onChange={formik.handleChange}\n              value={formik.values.phoneNumber}\n            />\n            {/* <p className=\"error-text\">Please enter phone numer</p> */}\n          </div>\n\n          <div className=\"form-input\">\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={formik.handleChange}\n              value={formik.values.password}\n            />\n            {/* <p className=\"error-text\">Please enter password</p> */}\n          </div>\n          <button type=\"submit\" className=\"btn-common\">\n            Submit\n          </button>\n\n          <button type=\"button\" className=\"btn-underline\">\n            {/* New User?  */}\n            <span onClick={() =>navigate(\"/register\", { replace: true })}>Register here!</span>{\" \"}\n          </button>\n          <div className=\"flex justify-space-between\">\n          <button type=\"button\" className=\"btn-underline\">\n              Back\n            </button>\n            <button type=\"button\" className=\"btn-underline\">\n              <span onClick={() => navigate(\"/forgotPassword\", { replace: true })}>Forgot Password?</span>{\" \"}\n            </button>\n\n          </div>\n\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default LoginScreen;\n"],"names":["navigate","useNavigate","dispatch","useDispatch","setIsAuthenticated","React","AuthContext","setIsAppLoader","AppLoaderContext","userState","useSelector","state","userData","formik","useFormik","initialValues","phoneNumber","password","userType","validateOnBlur","validateOnChange","validate","values","errors","onSubmit","AUTH_ACTIONS","formData","useEffect","case","AUTH_ACTIONS_TYPES","replace","storage","userDetails","accessToken","otp","toString","toast","message","position","className","handleSubmit","noValidate","type","placeholder","name","maxLength","onChange","handleChange","value","onClick"],"sourceRoot":""}