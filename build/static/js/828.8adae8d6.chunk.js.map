{"version":3,"file":"static/js/828.8adae8d6.chunk.js","mappings":"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","sources":["assets/dummy/star.svg","components/modal/appointmentModal.tsx","pages/App/Doctor/doctorProfileScreen.tsx"],"sourcesContent":["var _polygon, _polygon2, _polygon3, _polygon4, _polygon5;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgStar(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    enableBackground: \"new 0 0 512 512\",\n    viewBox: \"0 0 512 512\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _polygon || (_polygon = /*#__PURE__*/React.createElement(\"polygon\", {\n    fill: \"#ffd759\",\n    points: \"102.6 494.1 137 320.1 6 200.5 182.1 179.5 255.3 17.9 329.7 178.9 506 198.6 375.9 319.2 411.6 492.9 256.8 406.4\"\n  })), _polygon2 || (_polygon2 = /*#__PURE__*/React.createElement(\"polygon\", {\n    fill: \"#fabd3b\",\n    points: \"256 256 6 200.5 137 320.1\"\n  })), _polygon3 || (_polygon3 = /*#__PURE__*/React.createElement(\"polygon\", {\n    fill: \"#fabd3b\",\n    points: \"256 256 102.6 494.1 256.8 406.4 411.6 492.9\"\n  })), _polygon4 || (_polygon4 = /*#__PURE__*/React.createElement(\"polygon\", {\n    fill: \"#fabd3b\",\n    points: \"256 256 506 198.6 375.9 319.2\"\n  })), _polygon5 || (_polygon5 = /*#__PURE__*/React.createElement(\"polygon\", {\n    fill: \"#fabd3b\",\n    points: \"255.3 17.9 256 256 329.7 178.9\"\n  })));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgStar);\nexport default __webpack_public_path__ + \"static/media/star.701bd693ab62dfbc6bc856056e1f6d07.svg\";\nexport { ForwardRef as ReactComponent };","import { useFormik } from 'formik';\nimport React, { useEffect, useRef, useState } from 'react';\n\ninterface modalProps {\n    visible: Boolean;\n    callback?: any;\n}\nexport default function AppointmentModal(modalProps: modalProps) {\n    const [modalToggle, setModalToggle]: any = useState(false);\n\n    useEffect(() => {\n        setModalToggle(modalProps.visible);\n    }, [modalProps.visible])\n\n\n    const [initialFormValues, setInitialValues]: any = useState({\n        ptFirstName: \"\",\n        ptLastName: \"\",\n        ptPhoneNumber: \"\",\n        ptAge: \"\",\n        ptPaymentMode: \"CASH\",\n        ptPaymentStatus: \"Completed\",\n        ptAddress: \"\",\n        // clinicId:null,\n        ptGender: \"\",\n        appointmentDate: \"\"\n    });\n    const formRef: any = useRef();\n    const appointmentFormik: any = useFormik({\n        innerRef: formRef,\n        initialValues: initialFormValues,\n        enableReinitialize: true,\n        validateOnChange: false,\n        validateOnBlur: false,\n        // validationSchema\n        validate: (values) => {\n            // console.log(\"validate \", values);\n            const errors: any = {};\n            if (!values.ptFirstName) {\n                errors.ptFirstName = \"*Please enter first name\";\n            }\n            if (!values.ptPhoneNumber) {\n                errors.ptPhoneNumber = \"*Please enter phone number\";\n            }\n            if (!values.appointmentDate) {\n                errors.appointmentDate = \"*Please enter appointment date\";\n            }\n            if (!values.ptAge) {\n                errors.ptAge = \"*Please enter age\";\n            }\n            if (!values.ptGender) {\n                errors.ptGender = \"*Please select patient gender\";\n            }\n            if (!values.ptAddress) {\n                errors.ptAddress = \"*Please select patient address\";\n            }\n            console.log(\"Form Errors \", errors);\n            return errors;\n        },\n        onSubmit: (values) => {\n            // console.log(\"Values \", values);\n            //   handleSubmit(values);\n            handleSubmit();\n        }\n    });\n\n    function handleSubmit() {\n        // console.log(\"Values \", appointmentFormik.values);\n        let formValue = JSON.parse(JSON.stringify(appointmentFormik.values));\n        if (formValue.ptPhoneNumber) {\n            formValue.ptPhoneNumber = formValue.ptPhoneNumber.toString();\n        }\n        if (formValue.appointmentDate) {\n            formValue.appointmentDate = new Date(formValue.appointmentDate).toISOString();\n        }\n        // console.log(\"formValue\",formValue);\n        modalProps.callback({ type: \"appointmentFormSubmit\", data: { formValue } });\n        clearFormFields();\n    }\n\n    function clearFormFields() {\n        setInitialValues({\n            ptFirstName: \"\",\n            ptLastName: \"\",\n            ptPhoneNumber: \"\",\n            ptAge: \"\",\n            ptPaymentMode: \"CASH\",\n            ptPaymentStatus: \"Completed\",\n            ptAddress: \"\",\n            // clinicId:null,\n            ptGender: \"\",\n            appointmentDate: \"\"\n        })\n    };\n\n    return (\n        <div className={modalToggle ? \"modal\" : \"modal hidden\"}>\n            <button onClick={() => {\n                modalProps.callback({ type: \"toggleModal\", state: !modalToggle })\n                setModalToggle(!modalToggle)\n            }} className=\"btn--close-modal\">&times;</button>\n            <h2 className=\"modal__header\">\n                Book your <span className=\"highlight\">appointment</span>\n            </h2>\n            <form className=\"modal__form\" noValidate onSubmit={appointmentFormik.handleSubmit}>\n                <div className=\"input-box\">\n                    <label>First Name</label>\n                    <input type=\"text\" name=\"ptFirstName\" value={appointmentFormik.values.ptFirstName} onChange={appointmentFormik.handleChange} />\n                    {appointmentFormik.touched.ptFirstName && appointmentFormik.errors.ptFirstName && <span className='error-text'>{appointmentFormik.errors.ptFirstName}</span>}\n                </div>\n                <div className=\"input-box\">\n                    <label>Last Name</label>\n                    <input type=\"text\" name=\"ptLastName\" value={appointmentFormik.values.ptLastName} onChange={appointmentFormik.handleChange} />\n                    {appointmentFormik.touched.ptLastName && appointmentFormik.errors.ptLastName && <span className='error-text'>{appointmentFormik.errors.ptLastName}</span>}\n                </div>\n\n                <div className=\"input-box\">\n                    <label>Phone Number (+91)</label>\n                    <input type=\"number\" name=\"ptPhoneNumber\" value={appointmentFormik.values.ptPhoneNumber} onChange={appointmentFormik.handleChange} />\n                    {appointmentFormik.touched.ptPhoneNumber && appointmentFormik.errors.ptPhoneNumber && <span className='error-text'>{appointmentFormik.errors.ptPhoneNumber}</span>}\n                </div>\n\n\n                <div className=\"input-box\">\n                    <label>Age</label>\n                    <input type=\"number\" name=\"ptAge\" value={appointmentFormik.values.ptAge} onChange={appointmentFormik.handleChange} />\n                    {appointmentFormik.touched.ptAge && appointmentFormik.errors.ptAge && <span className='error-text'>{appointmentFormik.errors.ptAge}</span>}\n                </div>\n\n                <div className=\"input-box select-option-dropdown\">\n                    <label>Gender</label>\n                    <select name=\"ptGender\" value={appointmentFormik.values.ptGender} id=\"pt_Gender\" onChange={appointmentFormik.handleChange}>\n                        <option value=\"\">Select</option>\n                        <option value=\"M\">Male</option>\n                        <option value=\"F\">Female</option>\n                    </select>\n                    {appointmentFormik.touched.ptGender && appointmentFormik.errors.ptGender && <span className='error-text'>{appointmentFormik.errors.ptGender}</span>}\n                </div>\n\n\n                <div className=\"input-box\">\n                    <label>Address</label>\n                    <input type=\"text\" name=\"ptAddress\" value={appointmentFormik.values.ptAddress} onChange={appointmentFormik.handleChange} />\n                    {appointmentFormik.touched.ptAge && appointmentFormik.errors.ptAge && <span className='error-text'>{appointmentFormik.errors.ptAge}</span>}\n                </div>\n\n                <div className=\"input-box\">\n                    <label>Appointment date</label>\n                    <input type=\"date\" name=\"appointmentDate\" min={new Date().toISOString().split(\"T\")[0]} max={new Date(new Date().getTime() + (3 * 24 * 60 * 60 * 1000)).toISOString().split(\"T\")[0]} value={appointmentFormik.values.appointmentDate} onChange={appointmentFormik.handleChange} />\n                    {appointmentFormik.touched.appointmentDate && appointmentFormik.errors.appointmentDate && <span className='error-text'>{appointmentFormik.errors.appointmentDate}</span>}\n                </div>\n\n                {/* <button type='button' onClick={() => handleSubmit()} className=\"btn\">Confirm &rarr;</button> */}\n                <button type='submit' className=\"btn\">Confirm &rarr;</button>\n            </form>\n        </div>\n    )\n}","import { useCallback, useContext, useEffect, useState } from \"react\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nimport \"./doctorProfileScreen.scss\";\n\nimport drImage from \"../../../images/dr.jpg\";\nimport starIcon from \"../../../assets/dummy/star.svg\";\nimport Certi from \"../../../assets/dummy/certificate.png\";\nimport UserIcon from \"../../../assets/dummy/user.svg\";\n// import * as CONSTANTS from '../../../constants/dummy';\nimport * as ClinicAPIS from '../../../redux/saga/clinicSaga';\n\nimport { getDoctorDetailsById } from \"../../../redux/saga/doctorSaga\";\nimport { getClinicDetailsById } from \"../../../redux/saga/clinicSaga\";\nimport { AppLoaderContext } from \"../../../contexts\";\nimport AppointmentModal from \"../../../components/modal/appointmentModal\";\nimport { useSelector } from \"react-redux\";\n\n\n\nfunction ProfileScreen() {\n\tconst history: any = useNavigate();\n\t// const location: any = useLocation();\n\tconst navigate = useNavigate();\n\tconst params: any = useParams();\n\tconst userState:any = useSelector((state:any)=>state.userData);\n\tconst {setIsAppLoader } = useContext(AppLoaderContext);\n\tconst [doctorinfo, setDoctorInfo]: any = useState({ _id: null ,hospitalListDetails:[]});\n\tconst [appontmentForm, toggleAppointmentForm] = useState(false);\n\tconst [appointmentFormData, setAppointmentFormData]: any = useState({ clinicId: null });\n\n\tuseEffect(() => { getClinicDetails(); }, [params])\n\n\tconst getClinicDetails = useCallback(async () => {\n\t\tif (params && params.id) {\n\t\t\ttry {\n\t\t\t\tlet resp: any = await getDoctorDetailsById({ formData: { doctorId: params.id } });\n\t\t\t\tif (resp && resp.data && resp.data.data && resp.data.data.hospitals.length > 0) {\n\t\t\t\t\tlet hospitalInfoList: any = [];\n\t\t\t\t\tfor (let i = 0; i < resp.data.data.hospitals.length; i++) {\n\t\t\t\t\t\thospitalInfoList.push(await getClinicDetailsById({ formData: { clinicId: resp.data.data.hospitals[i] } }))\n\t\t\t\t\t}\n\t\t\t\t\tlet respList: any = await Promise.all(hospitalInfoList);\n\t\t\t\t\tlet clinicDetailList:any = [];\n\t\t\t\t\tfor (let j = 0; j < respList.length; j++) {\n\t\t\t\t\t\tclinicDetailList.push(respList[j].data.data ? respList[j].data.data : {})\n\t\t\t\t\t}\n\t\t\t\t\tif (respList) {\n\t\t\t\t\t\tsetDoctorInfo(resp.data.data ? { ...resp.data.data, hospitalListDetails: clinicDetailList } : { _id: null });\n\t\t\t\t\t}\n\t\t\t\t\tsetIsAppLoader(false);\n\t\t\t\t} else {\n\t\t\t\t\tsetDoctorInfo(resp.data.data ? resp.data.data : { _id: null });\n\t\t\t\t\tsetIsAppLoader(false);\n\t\t\t\t\ttoast(resp.data.message, { position: \"top-center\" });\n\t\t\t\t}\n\t\t\t} catch (error: any) {\n\t\t\t\tsetIsAppLoader(false);\n\t\t\t\tlet msg: any = error.message ? error.message : \"Failed to fetch details\"\n\t\t\t\ttoast(msg, { position: \"top-center\" });\n\t\t\t}\n\t\t}\n\t}, [params])\n\n\n\tconst renderDoctorinfo = useCallback(() => {\n\t\tconst { firstName, lastName, profilePic, degree, departments,hospitalListDetails } = doctorinfo;\n\t\tif (doctorinfo._id) {\n\t\t\treturn (\n\t\t\t\t<div className='dr-details-page'>\n\t\t\t\t\t<div className='dr-details-inner'>\n\t\t\t\t\t\t<div className=\"dr-img-box\">\n\t\t\t\t\t\t\t<img src={profilePic ? profilePic : drImage} alt='doctor-details' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className='dr-details-tag'>\n\t\t\t\t\t\t\t<div className='dr-name-details'>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t<h2>\n\t\t\t\t\t\t\t\t\t\t{`Dr ${firstName ? firstName : \" - \"} ${lastName ? lastName : \" - \"}`} {degree && degree.length > 0 ? <span>{degree.join(\",\")}</span> : null}\n\t\t\t\t\t\t\t\t\t</h2>\n\t\t\t\t\t\t\t\t\t{/* <p className='dr-icon-tag'>\n\t\t\t\t\t\t\t\t\t<img src={ToothImg} alt='tooth-doctor' />\n\t\t\t\t\t\t\t\t\tTooth specialist\n\t\t\t\t\t\t\t\t</p> */}\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t{/* <p className='price'>₹290/day</p> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className='experince-details'>\n\t\t\t\t\t\t\t\t<p className='icon-expr'>\n\t\t\t\t\t\t\t\t\t<img src={UserIcon} alt=\"person\" />\n\t\t\t\t\t\t\t\t\t3000+\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p className='icon-expr'>\n\t\t\t\t\t\t\t\t\t<img src={Certi} alt=\"experience\" />\n\t\t\t\t\t\t\t\t\t7+ experience\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p className='icon-expr'>\n\t\t\t\t\t\t\t\t\t{/* <StarsIcon /> */}\n\t\t\t\t\t\t\t\t\t<img src={starIcon} alt=\"star icon\" />\n\t\t\t\t\t\t\t\t\t4.7\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{departments.length > 0 ? <div className='dr-description'>\n\t\t\t\t\t\t\t\t<h5>Description</h5>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t\t{/* Lorem ipsum dolor sit amet consectetur adipisicing elit.\n\t\t\t\t\t\t\t\t\tInventore, enim! Ullam explicabo voluptates incidunt mollitia\n\t\t\t\t\t\t\t\t\tdolorem maiores praesentium rerum, enim adipisci\n\t\t\t\t\t\t\t\t\texercitationem culpa id. Libero eos dicta sapiente mollitia. */}\n\t\t\t\t\t\t\t\t\t{/* {CONSTANTS.DEFAULT_DUMMY_DATA.CLNIC_INFO_DESCRIPTION} */}\n\t\t\t\t\t\t\t\t\t{`${departments.join(\",\")}`}\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t</div> : null}\n\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<h5>Appointment Fee</h5>\n\t\t\t\t\t\t\t\t<p>₹ 200 /- </p>\n\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t<div className='dr-availibility'>\n\t\t\t\t\t\t\t\t<h5>Available at Clinics</h5>\n\t\t\t\t\t\t\t\t{hospitalListDetails && hospitalListDetails.length > 0 && hospitalListDetails.map((clinic: any, cId: number) => {\n\t\t\t\t\t\t\t\t\tconst {name} = clinic;\n\t\t\t\t\t\t\t\t\t// console.log(\"clinic\",clinic);\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t\t\t<div className='btn-call-book'>\n\t\t\t\t\t\t\t\t\t\t\t\t<p>{`${cId+1}. ${name}`}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t{/* <button className='btn-grad'>Call for appointment</button> */}\n\t\t\t\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconsole.log(\"userState\", userState);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// if (userState && userState.userDetails && userState.userDetails._id) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \tsetAppointmentFormData({clinicId:clinic._id});\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\ttoggleAppointmentForm(!appontmentForm)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// } else {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \tnavigate(\"/login\", {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\treplace: true, state: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\tdata: {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\t\tpathName: `./doctor/${params.id}`,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\t\tstateData: { _id: params.id }\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// \t})\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t\t\t\tclassName='btn-grad'>\n\t\t\t\t\t\t\t\t\t\t\t\t\tBook for appointment\n\t\t\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t<div className='available-times-tag'>\n\t\t\t\t\t\t\t\t\t\t\t\t<h5>Available-time</h5>\n\t\t\t\t\t\t\t\t\t\t\t\t<div className='available-time'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<p>{/* <TodayIcon /> */}</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Mon</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Tues</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Wed</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Thus</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Fri</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p>Sat</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t{/* <div className='btn-call-book'>\n\t\t\t\t\t\t\t\t\t<p>2. Sharda Narayan hospital</p>\n\t\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\t\tonClick={() => setModalToggle(!modalToggle)}\n\t\t\t\t\t\t\t\t\t\t// onClick={() => history('./appointment-confirm')}\n\t\t\t\t\t\t\t\t\t\t// onClick={() => toggleAppointmentForm(!appontmentForm)}\n\n\t\t\t\t\t\t\t\t\t\tclassName='btn-grad'>\n\t\t\t\t\t\t\t\t\t\tBook appointment\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div className='available-times-tag'>\n\t\t\t\t\t\t\t\t\t<h5>Available-time</h5>\n\t\t\t\t\t\t\t\t\t<div className='available-time'>\n\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t<p>Mon</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t<p>Tues</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t<p>Wed</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t<p>Thus</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t<p>Fri</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t\t<div className='dr-day-avail'>\n\t\t\t\t\t\t\t\t\t\t\t<p>Sat</p>\n\t\t\t\t\t\t\t\t\t\t\t<p className='font9'>2-5 PM</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div> */}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t}, [doctorinfo])\n\n\n\tfunction handleAppointmentCallbacks(callBacks: any) {\n\t\tconsole.log(\"callBacks @ Doctor profile Screen \", callBacks);\n\t\tif (callBacks && callBacks.type === \"toggleModal\") {\n\t\t\ttoggleAppointmentForm(callBacks.state);\n\t\t} else if (callBacks && callBacks.type === \"appointmentFormSubmit\") {\n\t\t\tconsole.log(\"callBacks data \", callBacks.data);\n\t\t\t// submitAppointData(callBacks.data);\n\t\t\ttoggleAppointmentForm(callBacks.state);\n\t\t}\n\t}\n\n\n\tasync function submitAppointData(formData: any) {\n\t\ttry {\n\t\t\tlet response: any = await ClinicAPIS.createAppointment({ formData: { ...formData.formValue, clinicId: appointmentFormData.clinicId } });\n\t\t\t// console.log(\"response @ Page \", response);\n\t\t\tlet msg = \"Something is wrong\";\n\t\t\tif (response && response.status === 200) {\n\t\t\t\tconsole.log(\"A\");\n\t\t\t\tmsg = response.data.message ? response.data.message : \"Appointment Created\";\n\t\t\t} else if (response && response.status === 401 && response.data && response.data.message) {\n\t\t\t\tmsg = response.data.message;\n\t\t\t}\n\t\t\ttoast(msg, { position: \"top-center\" });\n\t\t} catch (error: any) {\n\t\t\tconsole.log(\"error\", error);\n\t\t\tlet msg = 'Failed to send request';\n\t\t\ttoast(msg, { position: \"top-center\" });\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t<button onClick={() => history('/')} className=\"btn-back\">&larr;</button>\n\t\t\t\t</div>\n\t\t\t\t{/* <header className=\"App-header\">    </header> */}\n\t\t\t\t{renderDoctorinfo()}\n\t\t\t</div>\n\t\t\t<AppointmentModal visible={appontmentForm} callback={handleAppointmentCallbacks} />\n\t\t\t<div onClick={() => toggleAppointmentForm(!appontmentForm)} className={appontmentForm ? \"overlay\" : \"overlay hidden\"}></div>\n\n\t\t\t{/* <div className={modalToggle ? \"modal\" : \"modal hidden\"}>\n\t\t\t\t<button onClick={() => setModalToggle(!modalToggle)} className=\"btn--close-modal\">&times;</button>\n\t\t\t\t<h2 className=\"modal__header\">\n\t\t\t\t\tBook your <span className=\"highlight\">appointment</span>\n\t\t\t\t</h2>\n\t\t\t\t<form className=\"modal__form\">\n\t\t\t\t\t<label>First Name</label>\n\t\t\t\t\t<input type=\"text\" />\n\t\t\t\t\t<label>Last Name</label>\n\t\t\t\t\t<input type=\"text\" />\n\t\t\t\t\t<label>Email Address</label>\n\t\t\t\t\t<input type=\"email\" />\n\t\t\t\t\t<label>Phone Number</label>\n\t\t\t\t\t<input type=\"number\" />\n\t\t\t\t\t<label>Age</label>\n\t\t\t\t\t<input type=\"number\" />\n\t\t\t\t\t<label>Gender</label>\n\t\t\t\t\t<input type=\"text\" />\n\t\t\t\t\t<label>Address</label>\n\t\t\t\t\t<input type=\"text\" />\n\t\t\t\t\t<label>Appointment date</label>\n\t\t\t\t\t<input type=\"date\" />\n\t\t\t\t\t<button className=\"btn\">Confirm &rarr;</button>\n\t\t\t\t</form>\n\t\t\t</div> */}\n\t\t</>\n\t);\n}\n\nexport default ProfileScreen;\n"],"names":["AppointmentModal","modalProps","useState","modalToggle","setModalToggle","useEffect","visible","ptFirstName","ptLastName","ptPhoneNumber","ptAge","ptPaymentMode","ptPaymentStatus","ptAddress","ptGender","appointmentDate","initialFormValues","setInitialValues","formRef","useRef","appointmentFormik","useFormik","innerRef","initialValues","enableReinitialize","validateOnChange","validateOnBlur","validate","values","errors","console","log","onSubmit","formValue","JSON","parse","stringify","toString","Date","toISOString","callback","type","data","handleSubmit","className","onClick","state","noValidate","name","value","onChange","handleChange","touched","id","min","split","max","getTime","history","useNavigate","params","useParams","userState","useSelector","userData","setIsAppLoader","useContext","AppLoaderContext","_id","hospitalListDetails","doctorinfo","setDoctorInfo","appontmentForm","toggleAppointmentForm","clinicId","getClinicDetails","useCallback","getDoctorDetailsById","formData","doctorId","resp","hospitals","length","hospitalInfoList","i","getClinicDetailsById","push","Promise","all","respList","clinicDetailList","j","toast","message","position","msg","renderDoctorinfo","firstName","lastName","profilePic","degree","departments","src","drImage","alt","join","UserIcon","Certi","starIcon","map","clinic","cId","callBacks"],"sourceRoot":""}