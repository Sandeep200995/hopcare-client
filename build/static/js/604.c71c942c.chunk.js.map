{"version":3,"file":"static/js/604.c71c942c.chunk.js","mappings":"mRAoHA,MAvGA,YAC0BA,EAAAA,EAAAA,MAAtB,IACMC,GAAgBC,EAAAA,EAAAA,MAChBC,GAAmBC,EAAAA,EAAAA,KAAY,SAACC,GAAU,OAAKA,EAAMC,eAAe,IAC1E,GAAwCC,EAAAA,EAAAA,UAAS,CAAEC,KAAM,aAAa,eAA/DC,EAAS,KAAEC,EAAa,KAC/B,GAAmCH,EAAAA,EAAAA,UAAS,CAAC,CAAEC,KAAM,WAAYG,KAAM,YAAc,CAAEH,KAAM,QAASG,KAAM,SAAW,CAAEH,KAAM,OAAQG,KAAM,UAAtIC,GAAgJ,YAA7H,GAC1B,GAAmDL,EAAAA,EAAAA,UAAS,CACxDM,KAAM,CACF,CAUI,GAELC,MAAO,EAAGC,KAAM,IACrB,eAfKT,EAAe,KAAEU,EAAkB,MAiB1CC,EAAAA,EAAAA,YAAU,WC7BgC,IAACC,ED8BvCjB,EAASkB,EAAAA,EAA4B,CAAC,IACtClB,GC/BuCiB,ED+BoB,CAAEE,SAAU,CAAEC,MAAO,GAAIN,KAAM,IC/B9B,CAAEP,KAAMc,EAAAA,GAAsCJ,QAAAA,IDgC9G,GAAG,KAEHD,EAAAA,EAAAA,YAAU,WAEN,OADAM,QAAQC,IAAI,sCAAsCrB,GAC1CA,EAAiBsB,MACrB,KAAKC,EAAAA,GACDV,EAAmBb,EAAiBwB,oBACpC1B,EAASkB,EAAAA,EAA2B,CAAC,IACrC,MACJ,KAAKO,EAAAA,IAEDE,EAAAA,EAAAA,IAAMzB,EAAiB0B,QAAS,CAAEC,SAAU,eAC5C7B,EAASkB,EAAAA,EAA2B,CAAC,IAKjD,GAAG,CAAChB,KAGe4B,EAAAA,EAAAA,cAAY,WAC3B,OACI,gBAAKC,UAAU,cAAa,SACvBpB,EAAoBqB,KAAI,SAACC,EAAcC,GACpC,IAAQxB,EAAeuB,EAAfvB,KAAMH,EAAS0B,EAAT1B,KACd,OAAQ,mBAAuC4B,QAAS,kBAAM1B,GAAc,kBAAKD,GAAS,IAAEyB,QAAAA,IAAU,EAAEF,UAAS,sBAAiBvB,EAAUD,OAASA,EAAO,SAAW,IAAK,SAAEG,GAAc,OAAK,UAAzKwB,EAAG,YAAID,EAAQ1B,MAC3C,KAGZ,GAAG,CAACI,EAAqBH,IATzB,IAWM4B,GAAqBN,EAAAA,EAAAA,cAAY,WAEnC,OACI,gBAAKC,UAAU,eAAc,SAExB1B,EAAgBO,KAAKoB,KAAI,SAACC,EAAcC,GACrC,IAAQG,EASIJ,EATJI,gBAEJC,GAOQL,EARRM,SAQQN,EAPRK,OACAE,EAMQP,EANRO,YACAC,EAKQR,EALRQ,SACAC,EAIQT,EAJRS,WAIQT,EAHRU,cAGQV,EAFRW,gBAEQX,EADRY,cACQZ,EAARa,IACJ,OACI,0BACQ,gBAAKf,UAAU,eAAc,UAEzB,iBAAKA,UAAU,qBAAoB,WAE/B,6CACA,iCAAOS,GAA4B,GAAE,YAAIE,GAA0B,GAAE,YAAIJ,GAAgB,GAAE,YAAIG,GAAsB,OACrH,iDACA,iCAAOJ,EAAkBU,IAAOV,GAAiBW,OAAO,iBAAmB,eAKnG,KAGZ,GAAG,CAACrC,EAAqBH,EAAWH,IAEpC,OACI,iBAAK0B,UAAU,MAAK,WAChB,SAAC,IAAM,IAENK,MAKb,C,4FE7Gaa,EAAe,SAAChC,GAAe,MAAM,CAAEV,KAAMc,EAAAA,EAAqBJ,QAAAA,EAAS,EAC3EiC,EAAc,SAACjC,GAAe,MAAM,CAAEV,KAAMc,EAAAA,EAAoBJ,QAAAA,EAAS,C","sources":["pages/App/Appointments/clinic/clinicAppointments.tsx","redux/actions/appointment/index.tsx","redux/actions/common/index.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport Header from \"../../../../components/page/Header/header\";\nimport * as COMMON_ACTIONS from \"../../../../redux/actions/common\";\nimport * as AppointmentActions from \"../../../../redux/actions/appointment/index\";\nimport * as APPOINTMENT_ACTION_TYPES from \"../../../../redux/actions/appointment/types\";\nimport moment from \"moment\";\nimport \"./clinicAppointments.scss\";\nimport { useSelector } from \"react-redux\";\nimport { toast } from \"react-toastify\";\n\n\nfunction ClinicAppointments() {\n    const navigate: any = useNavigate();\n    const dispatch: any = useDispatch();\n    const appointmentState = useSelector((state: any) => state.appointmentData);\n    const [selAppTab, setAppointTab]: any = useState({ type: \"upcoming\" });\n    const [allAppointmentTypes]: any = useState([{ type: \"upcoming\", name: \"Upcoming\" }, { type: \"today\", name: \"Today\" }, { type: \"past\", name: \"Past\" }])\n    const [appointmentData, setAppointmentData]: any = useState({\n        list: [\n            {\n                // appointmentDate: \"18-07-2023\",\n                // clinicId: \"hsbahjd\",\n                // ptAge: \"23\",\n                // ptFirstName: \"Sandeep\",\n                // ptGender: \"M\",\n                // ptLastName: \"Singh\",\n                // ptPaymentMode: \"Cash\",\n                // ptPaymentStatus: \"Pending\",\n                // ptPhoneNumber: \"7618815004\",\n                // _id: \"shfajhdgsajhdjhsa\"\n            }\n        ], total: 0, skip: 0\n    });\n\n    useEffect(() => {\n        dispatch(COMMON_ACTIONS.startLoading({}));\n        dispatch(AppointmentActions.getAllClinicAppointmentsAction({ formData: { limit: 20, skip: 0 } }));\n    }, [])\n\n    useEffect(() => {\n        console.log(\"Appointment Store @CLNIC APOINTMNts\",appointmentState);\n        switch (appointmentState.case) {\n            case APPOINTMENT_ACTION_TYPES.GET_ALL_APPOINTMENTS_SUCCESS:\n                setAppointmentData(appointmentState.clinicAppointments);\n                dispatch(COMMON_ACTIONS.stopLoading({}));\n                break;\n            case APPOINTMENT_ACTION_TYPES.GET_ALL_APPOINTMENTS_FAILURE:\n                // toast(appointmentState.message);\n                toast(appointmentState.message, { position: \"top-center\" });\n                dispatch(COMMON_ACTIONS.stopLoading({}));\n                break;\n            default:\n                break;\n        }\n    }, [appointmentState]);\n\n\n    const renderTabs = useCallback(() => {\n        return (\n            <div className='booking-tab'>\n                {allAppointmentTypes.map((appInfo: any, ind: number) => {\n                    const { name, type } = appInfo;\n                    return (<button key={`${ind}_${appInfo.type}`} onClick={() => setAppointTab({ ...selAppTab, appInfo })} className={`btn-booking ${selAppTab.type === type ? \"active\" : \"\"}`}>{name ? name : \" - \"}</button>);\n                })}\n            </div>\n        )\n    }, [allAppointmentTypes, selAppTab])\n\n    const renderAppointments = useCallback(() => {\n        // let appointments = [{\"\"}]\n        return (\n            <div className='booking-page'>\n                {/* <span >Today's Appointments </span> */}\n                {appointmentData.list.map((appInfo: any, ind: number) => {\n                    const { appointmentDate,\n                        clinicId,\n                        ptAge,\n                        ptFirstName,\n                        ptGender,\n                        ptLastName,\n                        ptPaymentMode,\n                        ptPaymentStatus,\n                        ptPhoneNumber,\n                        _id } = appInfo;\n                    return (\n                        <div>\n                                <div className='booking-card'>\n                                    {/* <img src={ImgHosp} /> */}\n                                    <div className='booking-card-inner'>\n                                        {/* <span>Current</span> */}\n                                        <h5>Patient Details</h5>\n                                        <p>{`${ptFirstName ? ptFirstName : \"\"} ${ptLastName ? ptLastName : \"\"} ${ptAge ? ptAge : \"\"}/${ptGender ? ptGender : \"\"}`}</p>\n                                        <h5>Appointment Details</h5>\n                                        <p>{`${appointmentDate ? moment(appointmentDate).format(\"dddd D MMM YY\") : \" - \"}`}</p>\n                                    </div>\n                                </div>\n                        </div>\n                    )\n                })}\n            </div>\n        )\n    }, [allAppointmentTypes, selAppTab, appointmentData])\n\n    return (\n        <div className=\"App\">\n            <Header></Header>\n            {/* {renderTabs()}*/}\n            {renderAppointments()}\n            {/* <div>Work in progress!!!</div>\n      <div>Please try after sometime</div> */}\n        </div>\n    );\n}\n\nexport default ClinicAppointments;\n","import * as Types from \"./types\";\r\n\r\n/**\r\n * @summary Appointment Actions\r\n */\r\nexport const getAllAppointmentsAction = (payload: object) => ({ type: Types.GET_ALL_APPOINTMENTS, payload });\r\n\r\nexport const getAllClinicAppointmentsAction = (payload: object) => ({ type: Types.GET_ALL_APPOINTMENTS_BY_CLINIC, payload });\r\n\r\n\r\n// export const getAllDoctors = (payload) => {\r\n//     console.log(\"Payload @ actions\", payload);\r\n//     return { type: Types.GET_ALL_DOCTORS, payload: { key: \"hhhhh\" } };\r\n// };\r\n","import * as Types from \"./types\";\r\n\r\n/**\r\n * @summary Authetication Actions\r\n */\r\nexport const startLoading = (payload: object) => ({ type: Types.START_LOADING, payload });\r\nexport const stopLoading = (payload: object) => ({ type: Types.STOP_LOADING, payload });\r\n"],"names":["useNavigate","dispatch","useDispatch","appointmentState","useSelector","state","appointmentData","useState","type","selAppTab","setAppointTab","name","allAppointmentTypes","list","total","skip","setAppointmentData","useEffect","payload","COMMON_ACTIONS","formData","limit","Types","console","log","case","APPOINTMENT_ACTION_TYPES","clinicAppointments","toast","message","position","useCallback","className","map","appInfo","ind","onClick","renderAppointments","appointmentDate","ptAge","clinicId","ptFirstName","ptGender","ptLastName","ptPaymentMode","ptPaymentStatus","ptPhoneNumber","_id","moment","format","startLoading","stopLoading"],"sourceRoot":""}