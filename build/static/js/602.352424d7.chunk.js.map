{"version":3,"file":"static/js/602.352424d7.chunk.js","mappings":"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","sources":["pages/Auth/Signup/signupScreen.tsx"],"sourcesContent":["import { useFormik } from \"formik\";\nimport React, { useEffect, useState } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nimport { storage } from \"../../../utills\";\nimport \"./register.scss\";\nimport * as AUTH_ACTIONS from \"../../../redux/actions/Auth/authActions\";\nimport * as AUTH_ACTIONS_TYPES from \"../../../redux/actions/Auth/types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppLoaderContext } from \"../../../contexts\";\n\nfunction SignupScreen() {\n  const navigate = useNavigate();\n  const dispatch = useDispatch();\n  const { state } = useLocation();\n  // const { isSideActive, toggleSidebar } = React.useContext(SideBarContext);\n  const { setIsAppLoader } = React.useContext(AppLoaderContext);\n  const [userTypes]: any = useState([\n    { \"name\": \"Select\", \"value\": \"\" },\n    { \"name\": \"User\", \"value\": \"consumer\" },\n    { \"name\": \"Hospital\", \"value\": \"clinic\" },\n  ]);\n  const userState = useSelector((state: any) => state.userData);\n  const from = state ? state.from.pathname : \"/\";\n  const formik = useFormik({\n    initialValues: {\n      dialNumber: \"+91\",\n      firstName: \"\",\n      lastName: \"\",\n      phoneNumber: \"\",\n      password: \"\",\n      cnfPassword: \"\",\n      userType: \"consumer\"\n    },\n    validateOnBlur: true,\n    validateOnChange: false,\n    // validationSchema: validationSchema,\n    validate: (values) => {\n      let errors: any = {};\n      if (!values.firstName) {\n        errors.firstName = \"Please enter user first name\";\n      }\n      // if (!values.lastName) {\n      //   errors.lastName = \"Please enter user last name\"\n      // }\n      if (!values.phoneNumber) {\n        errors.phoneNumber = \"Please enter 10 digit phone number\";\n      }\n      if (!values.password) {\n        errors.password = \"Please enter password\";\n      }\n      if (!values.cnfPassword) {\n        errors.cnfPassword = \"Please again enter password to confirm\";\n      }\n      if (values.password && values.cnfPassword && values.cnfPassword !== values.password) {\n        errors.cnfPassword = \"Not matching with password\";\n      }\n      return errors;\n    },\n    onSubmit: (values) => {\n      // console.log(\"Values \",values);\n      let reqData = JSON.parse(JSON.stringify(values));\n      delete reqData.cnfPassword;\n      // console.log(\"reqData\",reqData);\n      setIsAppLoader(true);\n      dispatch(AUTH_ACTIONS.registerUser({ formData: reqData }));\n    }\n  });\n\n  useEffect(() => {\n    // console.log(\"USER STATE @ REGISTER PAGE :\", userState);\n    switch (userState.case) {\n      case AUTH_ACTIONS_TYPES.REGISTER_USER_SUCCESS:\n        setIsAppLoader(false);\n        toast(userState.message, { position: \"top-center\" });\n        // navigate(\"./otp\", { replace: true });\n        navigate(\"/otp\", {\n          state: {\n            otp: userState.userDetails.otp ? userState.userDetails.otp.toString() : null,\n            phoneNumber: formik.values.phoneNumber,\n            userType: formik.values.userType,\n            password: formik.values.password\n          },\n          replace: true\n        });\n        break;\n      case AUTH_ACTIONS_TYPES.REGISTER_USER_FAILURE:\n        setIsAppLoader(false);\n        toast(userState.message, { position: \"top-center\" });\n        break;\n      default:\n        break;\n    }\n  }, [userState.case]);\n\n  return (\n    <div className=\"form-area\">\n      <h2>Register </h2>\n      <form onSubmit={formik.handleSubmit} noValidate>\n        <div className=\"form-inner\">\n          <div className=\"form-input\">\n            <input\n              type=\"text\"\n              placeholder=\"First Name\"\n              name=\"firstName\"\n              onChange={formik.handleChange}\n              value={formik.values.firstName}\n            />\n            {formik.touched.firstName && formik.errors.firstName && <p className=\"error-text\">{formik.errors.firstName}</p>}\n          </div>\n          <div className=\"form-input\">\n            <input\n              type=\"text\"\n              placeholder=\"Last Name\"\n              name=\"lastName\"\n              onChange={formik.handleChange}\n              value={formik.values.lastName}\n            />\n            {formik.touched.lastName && formik.errors.lastName && <p className=\"error-text\">{formik.errors.lastName}</p>}\n          </div>\n\n          <div className=\"form-input\">\n            <input\n              type=\"text\"\n              placeholder=\"Mobile number\"\n              name=\"phoneNumber\"\n              maxLength={10}\n              onChange={formik.handleChange}\n              value={formik.values.phoneNumber}\n            />\n            {formik.touched.phoneNumber && formik.errors.phoneNumber && <p className=\"error-text\">{formik.errors.phoneNumber}</p>}\n          </div>\n\n          <div className=\"form-input\">\n            <input\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Password\"\n              onChange={formik.handleChange}\n              value={formik.values.password}\n            />\n            {formik.touched.password && formik.errors.password && <p className=\"error-text\">{formik.errors.password}</p>}\n          </div>\n\n          <div className=\"form-input\">\n            <input\n              type=\"password\"\n              name=\"cnfPassword\"\n              placeholder=\"Confirm Password\"\n              onChange={formik.handleChange}\n              value={formik.values.cnfPassword}\n            />\n            {formik.touched.cnfPassword && formik.errors.cnfPassword && <p className=\"error-text\">{formik.errors.cnfPassword}</p>}\n          </div>\n          <div className=\"select-option-dropdown\">\n            <select name=\"userType\" value={formik.values.userType} id=\"userType\" onChange={formik.handleChange}>\n              {userTypes.map((userType: any, userInd: number) => {\n                return (<option key={`_${userInd}`} value={userType.value}>{userType.name}</option>);\n              })}\n            </select>\n            {formik.touched.userType && formik.errors.userType && <p className='error-text'>{formik.errors.userType}</p>}\n          </div>\n          <button type=\"submit\" className=\"btn-common\">Submit</button>\n          <button type=\"button\" className=\"btn-underline\" onClick={() => navigate(\"/login\", { replace: true })}>Back to login</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SignupScreen;\n"],"names":["navigate","useNavigate","dispatch","useDispatch","state","useLocation","setIsAppLoader","React","AppLoaderContext","useState","userTypes","userState","useSelector","userData","formik","from","pathname","useFormik","initialValues","dialNumber","firstName","lastName","phoneNumber","password","cnfPassword","userType","validateOnBlur","validateOnChange","validate","values","errors","onSubmit","reqData","JSON","parse","stringify","AUTH_ACTIONS","formData","useEffect","case","AUTH_ACTIONS_TYPES","toast","message","position","otp","userDetails","toString","replace","className","handleSubmit","noValidate","type","placeholder","name","onChange","handleChange","value","touched","maxLength","id","map","userInd","onClick"],"sourceRoot":""}