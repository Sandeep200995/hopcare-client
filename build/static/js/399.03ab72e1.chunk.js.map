{"version":3,"file":"static/js/399.03ab72e1.chunk.js","mappings":"uPA2IA,MAhIA,WACE,IAAMA,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAETC,EAAmBC,EAAAA,WAAiBC,EAAAA,IAApCF,eACFG,GAAYC,EAAAA,EAAAA,KAAY,SAACC,GAAU,OAAKA,EAAMC,QAAQ,IACtDC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,YAAa,GACbC,YAAa,GACbC,YAAa,GACbC,SAAU,WACVC,IAAK,IAEPC,gBAAgB,EAChBC,kBAAkB,EAElBC,SAAU,SAACC,GACT,IAAIC,EAAc,CAAC,EAanB,OAZKD,EAAOJ,MACVK,EAAOL,IAAM,qBAEVI,EAAOP,cACVQ,EAAOR,YAAc,yBAElBO,EAAON,cACVO,EAAOP,YAAc,0CAEnBM,EAAOP,aAAeO,EAAON,aAAeM,EAAON,cAAgBM,EAAOP,cAC5EQ,EAAOP,YAAc,8BAEhBO,CACT,EACAC,SAAU,SAACF,GACTG,QAAQC,IAAI,WAAWJ,GACvBlB,GAAe,GACf,IAAIuB,EAAU,CACZ,YAAeL,EAAOR,YACtB,SAAYQ,EAAOL,SACnB,IAAOK,EAAOJ,IACd,SAAYI,EAAOP,aAErBU,QAAQC,IAAI,UAAWC,GAEvBzB,EAAS0B,EAAAA,GAA4B,CAAEC,SAAUF,IACnD,IAmCF,OAhCAG,EAAAA,EAAAA,YAAU,WAER,OAAQvB,EAAUwB,MAChB,KAAKC,EAAAA,GACH5B,GAAe,GACfN,EAAS,UAAW,CAAEmC,SAAS,KAC/BC,EAAAA,EAAAA,IAAM3B,EAAU4B,SAChB,MACF,KAAKH,EAAAA,GACH5B,GAAe,IACf8B,EAAAA,EAAAA,IAAM3B,EAAU4B,SAKtB,GAAG,CAAC5B,EAAUwB,QAEdD,EAAAA,EAAAA,YAAU,WAEN9B,GAAYA,EAASS,OAAST,EAASS,MAAMS,MAC/CP,EAAOyB,cAAc,MAAMpC,EAASS,MAAMS,KAC1CP,EAAOyB,cAAc,cAAcpC,EAASS,MAAMK,aAEpD,GAAG,CAACd,KAUF,iBAAKqC,UAAU,YAAW,WACxB,kDACA,iBAAMb,SAAUb,EAAO2B,aAAcC,YAAU,YAC7C,iBAAKF,UAAU,aAAY,WACzB,iBAAKA,UAAU,aAAY,WACzB,kBACEG,KAAK,SACLC,YAAY,MACZC,KAAK,MACLC,UAAW,EACXC,SAAUjC,EAAOkC,aACjBC,MAAOnC,EAAOW,OAAOJ,MAEtBP,EAAOY,OAAOL,KAAOP,EAAOoC,QAAQ7B,MAAO,cAAGmB,UAAU,aAAY,SAAE1B,EAAOY,OAAOL,UAEvF,iBAAKmB,UAAU,aAAY,WACzB,kBACEG,KAAK,WACLE,KAAK,cACLD,YAAY,eACZG,SAAUjC,EAAOkC,aACjBC,MAAOnC,EAAOW,OAAOP,cAEtBJ,EAAOY,OAAOR,aAAeJ,EAAOoC,QAAQhC,cAAe,cAAGsB,UAAU,aAAY,SAAE1B,EAAOY,OAAOR,kBAEvG,iBAAKsB,UAAU,aAAY,WACzB,kBACEG,KAAK,WACLE,KAAK,cACLD,YAAY,mBACZG,SAAUjC,EAAOkC,aACjBC,MAAOnC,EAAOW,OAAON,cAEtBL,EAAOY,OAAOP,aAAeL,EAAOoC,QAAQ/B,cAAe,cAAGqB,UAAU,aAAY,SAAE1B,EAAOY,OAAOP,kBAEvG,mBAAQwB,KAAK,SAASH,UAAU,aAAY,qBAI5C,mBAAQG,KAAK,SAASH,UAAU,gBAAgBW,QAAS,kBAAMlD,EAAS,kBAAmB,CAAEmC,SAAS,GAAO,EAAC,4CAKxH,C","sources":["pages/Auth/ChangePassword/changePasswordScreen.tsx"],"sourcesContent":["import { useFormik } from \"formik\";\nimport React, { useEffect } from \"react\";\nimport { useLocation, useNavigate } from \"react-router-dom\";\nimport { storage } from \"../../../utills\";\nimport \"./changePassword.scss\";\nimport * as AUTH_ACTIONS from \"../../../redux/actions/Auth/authActions\";\nimport * as AUTH_ACTIONS_TYPES from \"../../../redux/actions/Auth/types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppLoaderContext } from \"../../../contexts\";\nimport { toast } from \"react-toastify\";\n\nfunction SignupScreen() {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const dispatch = useDispatch();\n  // const { isSideActive, toggleSidebar } = React.useContext(SideBarContext);\n  const { setIsAppLoader } = React.useContext(AppLoaderContext);\n  const userState = useSelector((state: any) => state.userData);\n  const formik = useFormik({\n    initialValues: {\n      phoneNumber: \"\",\n      newPassword: \"\",\n      cnfPassword: \"\",\n      userType: \"consumer\",\n      otp: \"\"\n    },\n    validateOnBlur: true,\n    validateOnChange: false,\n    // validationSchema: validationSchema,\n    validate: (values) => {\n      let errors: any = {};\n      if (!values.otp) {\n        errors.otp = \"Please enter otp \";\n      }\n      if (!values.newPassword) {\n        errors.newPassword = \"Please enter password\";\n      }\n      if (!values.cnfPassword) {\n        errors.cnfPassword = \"Please again enter password to confirm\";\n      }\n      if (values.newPassword && values.cnfPassword && values.cnfPassword !== values.newPassword) {\n        errors.cnfPassword = \"Not matching with password\";\n      }\n      return errors;\n    },\n    onSubmit: (values) => {\n      console.log(\"values :\",values);\n      setIsAppLoader(true);\n      let reqData = {\n        \"phoneNumber\": values.phoneNumber,\n        \"userType\": values.userType,\n        \"otp\": values.otp,\n        \"password\": values.newPassword\n      }\n      console.log(\"reqData\", reqData);\n      // return\n      dispatch(AUTH_ACTIONS.changePassword({ formData: reqData }));\n    }\n  });\n\n  useEffect(() => {\n    // console.log(\"userState\", userState);\n    switch (userState.case) {\n      case AUTH_ACTIONS_TYPES.CHANGE_PASSWORD_SUCCESS:\n        setIsAppLoader(false);\n        navigate(\"./login\", { replace: true });\n        toast(userState.message);\n        break;\n      case AUTH_ACTIONS_TYPES.CHANGE_PASSWORD_FAILURE:\n        setIsAppLoader(false);\n        toast(userState.message);\n        break;\n      default:\n        break;\n    }\n  }, [userState.case]);\n\n  useEffect(() => {\n    // console.log(\"location\",location.state);\n   if(location && location.state && location.state.otp){\n    formik.setFieldValue('otp',location.state.otp);\n    formik.setFieldValue('phoneNumber',location.state.phoneNumber);\n   }\n  }, [location])\n\n  // useEffect(() => {\n  //  console.log(\"Values::\",formik.values);\n\n  // }, [formik.values])\n\n\n\n  return (\n    <div className=\"form-area\">\n      <h2>Set a new Password  </h2>\n      <form onSubmit={formik.handleSubmit} noValidate>\n        <div className=\"form-inner\">\n          <div className=\"form-input\">\n            <input\n              type=\"number\"\n              placeholder=\"OTP\"\n              name=\"otp\"\n              maxLength={4}\n              onChange={formik.handleChange}\n              value={formik.values.otp}\n            />\n            {formik.errors.otp && formik.touched.otp && <p className=\"error-text\">{formik.errors.otp}</p>}\n          </div>\n          <div className=\"form-input\">\n            <input\n              type=\"password\"\n              name=\"newPassword\"\n              placeholder=\"New Password\"\n              onChange={formik.handleChange}\n              value={formik.values.newPassword}\n            />\n            {formik.errors.newPassword && formik.touched.newPassword && <p className=\"error-text\">{formik.errors.newPassword}</p>}\n          </div>\n          <div className=\"form-input\">\n            <input\n              type=\"password\"\n              name=\"cnfPassword\"\n              placeholder=\"Confirm Password\"\n              onChange={formik.handleChange}\n              value={formik.values.cnfPassword}\n            />\n            {formik.errors.cnfPassword && formik.touched.cnfPassword && <p className=\"error-text\">{formik.errors.cnfPassword}</p>}\n          </div>\n          <button type=\"submit\" className=\"btn-common\">\n            Submit\n          </button>\n\n          <button type=\"button\" className=\"btn-underline\" onClick={() => navigate(\"/forgotPassword\", { replace: true })}>Back to forgot password</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default SignupScreen;\n"],"names":["navigate","useNavigate","location","useLocation","dispatch","useDispatch","setIsAppLoader","React","AppLoaderContext","userState","useSelector","state","userData","formik","useFormik","initialValues","phoneNumber","newPassword","cnfPassword","userType","otp","validateOnBlur","validateOnChange","validate","values","errors","onSubmit","console","log","reqData","AUTH_ACTIONS","formData","useEffect","case","AUTH_ACTIONS_TYPES","replace","toast","message","setFieldValue","className","handleSubmit","noValidate","type","placeholder","name","maxLength","onChange","handleChange","value","touched","onClick"],"sourceRoot":""}